<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
	
   <persistence-unit name="majAnteros" transaction-type="RESOURCE_LOCAL">
     <!-- <class>org.hibernate.ejb.test.Cat</class> -->
     <!--  <class>org.hibernate.ejb.test.Distributor</class> -->
     <!--  <class>org.hibernate.ejb.test.Item</class> -->
    
      <properties>
      
	    <!--  <property name="hibernate.hbm2ddl.auto" value="update"/>
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://anteros.istic.univ-rennes1.fr/base_14010287"/>
		<property name="hibernate.connection.username" value="user_14010287"/>
		<property name="hibernate.connection.password" value="toor"/>-->
		
		<!-- LOCALHOST MELISSA -->
		<property name="hibernate.hbm2ddl.auto" value="update"/>
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://localhost/galette_broons"/>
		<property name="hibernate.connection.username" value="root"/>
		<property name="hibernate.connection.password" value=""/>
       
         <!-- cache configuration -->
         <!-- <property name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item" value="read-write"/>-->
         <!-- <property name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors" value="read-write, RegionName"/>-->

         <!-- alternatively to <class> and <property> declarations, you can use a regular hibernate.cfg.xml file -->
         <!-- property name="hibernate.ejb.cfgfile" value="/org/hibernate/ejb/test/hibernate.cfg.xml"/ -->
         
      </properties>
   </persistence-unit>
   
   <persistence-unit name="createAnteros" transaction-type="RESOURCE_LOCAL">
     <!-- <class>org.hibernate.ejb.test.Cat</class> -->
     <!--  <class>org.hibernate.ejb.test.Distributor</class> -->
     <!--  <class>org.hibernate.ejb.test.Item</class> -->
      <properties>
      
	    <property name="hibernate.hbm2ddl.auto" value="create"/>
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://anteros.istic.univ-rennes1.fr/base_14010287"/>
		<property name="hibernate.connection.username" value="user_14010287"/>
		<property name="hibernate.connection.password" value="toor"/>
        
         <!-- cache configuration -->
         <!-- <property name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item" value="read-write"/>-->
         <!-- <property name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors" value="read-write, RegionName"/>-->

         <!-- alternatively to <class> and <property> declarations, you can use a regular hibernate.cfg.xml file -->
         <!-- property name="hibernate.ejb.cfgfile" value="/org/hibernate/ejb/test/hibernate.cfg.xml"/ -->
         
      </properties>
   </persistence-unit>
   
   <persistence-unit name="dropAnteros" transaction-type="RESOURCE_LOCAL">
     <!-- <class>org.hibernate.ejb.test.Cat</class> -->
     <!--  <class>org.hibernate.ejb.test.Distributor</class> -->
     <!--  <class>org.hibernate.ejb.test.Item</class> -->
      <properties>
      
	    <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://anteros.istic.univ-rennes1.fr/base_14010287"/>
		<property name="hibernate.connection.username" value="user_14010287"/>
		<property name="hibernate.connection.password" value="toor"/>
        
         <!-- cache configuration -->
         <!-- <property name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item" value="read-write"/>-->
         <!-- <property name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors" value="read-write, RegionName"/>-->

         <!-- alternatively to <class> and <property> declarations, you can use a regular hibernate.cfg.xml file -->
         <!-- property name="hibernate.ejb.cfgfile" value="/org/hibernate/ejb/test/hibernate.cfg.xml"/ -->
         
      </properties>
   </persistence-unit>

	<persistence-unit name="createAndDrop" transaction-type="RESOURCE_LOCAL">
     <!-- <class>org.hibernate.ejb.test.Cat</class> -->
     <!--  <class>org.hibernate.ejb.test.Distributor</class> -->
     <!--  <class>org.hibernate.ejb.test.Item</class> -->
      <properties>
      
	    <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://localhost/broons"/>
		<property name="hibernate.connection.username" value="root"/>
		<property name="hibernate.connection.password" value=""/>
        
         <!-- cache configuration -->
         <!-- <property name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item" value="read-write"/>-->
         <!-- <property name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors" value="read-write, RegionName"/>-->

         <!-- alternatively to <class> and <property> declarations, you can use a regular hibernate.cfg.xml file -->
         <!-- property name="hibernate.ejb.cfgfile" value="/org/hibernate/ejb/test/hibernate.cfg.xml"/ -->
         
      </properties>
   </persistence-unit>
   
   <persistence-unit name="chargement" transaction-type="RESOURCE_LOCAL">
     <!-- <class>org.hibernate.ejb.test.Cat</class> -->
   <!-- <class>fr.galettedebroonsfr.galettedebroons.domain.Temporaire</class> -->
     <!--  <class>org.hibernate.ejb.test.Distributor</class> -->
     <!--  <class>org.hibernate.ejb.test.Item</class> -->
     <properties>   
	       
		<property name="toplink.target-database" value="MySQL"/>
		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
		<property name="hibernate.show_sql" value="true"/>
		<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
		<property name="hibernate.connection.url" value="jdbc:mysql://localhost/broons"/>
		<property name="hibernate.connection.username" value="root"/>
		<property name="hibernate.connection.password" value=""/> 
        
         <!-- cache configuration -->
         <!-- <property name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item" value="read-write"/>-->
         <!-- <property name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors" value="read-write, RegionName"/>-->

         <!-- alternatively to <class> and <property> declarations, you can use a regular hibernate.cfg.xml file -->
         <!-- property name="hibernate.ejb.cfgfile" value="/org/hibernate/ejb/test/hibernate.cfg.xml"/ -->
         
      </properties>
   </persistence-unit>
   
</persistence>